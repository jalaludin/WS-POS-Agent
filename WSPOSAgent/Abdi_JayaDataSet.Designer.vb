'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("Abdi_JayaDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class Abdi_JayaDataSet
    Inherits Global.System.Data.DataSet
    
    Private _tableABDI_JAYA_History_Sales As _ABDI_JAYA_History_SalesDataTable
    
    Private _tableABDI_JAYA_Cause_of_Inactivity As _ABDI_JAYA_Cause_of_InactivityDataTable

    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("ABDI JAYA$History Sales")) Is Nothing) Then
                MyBase.Tables.Add(New _ABDI_JAYA_History_SalesDataTable(ds.Tables("ABDI JAYA$History Sales")))
            End If
            If (Not (ds.Tables("ABDI JAYA$Cause of Inactivity")) Is Nothing) Then
                MyBase.Tables.Add(New _ABDI_JAYA_Cause_of_InactivityDataTable(ds.Tables("ABDI JAYA$Cause of Inactivity")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property _ABDI_JAYA_History_Sales() As _ABDI_JAYA_History_SalesDataTable
        Get
            Return Me._tableABDI_JAYA_History_Sales
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.Browsable(False), _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property _ABDI_JAYA_Cause_of_Inactivity() As _ABDI_JAYA_Cause_of_InactivityDataTable
        Get
            Return Me._tableABDI_JAYA_Cause_of_Inactivity
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.BrowsableAttribute(True), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(value As Global.System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As Abdi_JayaDataSet = CType(MyBase.Clone, Abdi_JayaDataSet)
        cln.InitVars()
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset()
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("ABDI JAYA$History Sales")) Is Nothing) Then
                MyBase.Tables.Add(New _ABDI_JAYA_History_SalesDataTable(ds.Tables("ABDI JAYA$History Sales")))
            End If
            If (Not (ds.Tables("ABDI JAYA$Cause of Inactivity")) Is Nothing) Then
                MyBase.Tables.Add(New _ABDI_JAYA_Cause_of_InactivityDataTable(ds.Tables("ABDI JAYA$Cause of Inactivity")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXml(reader)
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars()
        Me.InitVars(True)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me._tableABDI_JAYA_History_Sales = CType(MyBase.Tables("ABDI JAYA$History Sales"), _ABDI_JAYA_History_SalesDataTable)
        If (initTable = True) Then
            If (Not (Me._tableABDI_JAYA_History_Sales) Is Nothing) Then
                Me._tableABDI_JAYA_History_Sales.InitVars()
            End If
        End If
        Me._tableABDI_JAYA_Cause_of_Inactivity = CType(MyBase.Tables("ABDI JAYA$Cause of Inactivity"), _ABDI_JAYA_Cause_of_InactivityDataTable)
        If (initTable = True) Then
            If (Not (Me._tableABDI_JAYA_Cause_of_Inactivity) Is Nothing) Then
                Me._tableABDI_JAYA_Cause_of_Inactivity.InitVars()
            End If
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub InitClass()
        Me.DataSetName = "Abdi_JayaDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/Abdi_JayaDataSet.xsd"
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me._tableABDI_JAYA_History_Sales = New _ABDI_JAYA_History_SalesDataTable()
        MyBase.Tables.Add(Me._tableABDI_JAYA_History_Sales)
        Me._tableABDI_JAYA_Cause_of_Inactivity = New _ABDI_JAYA_Cause_of_InactivityDataTable()
        MyBase.Tables.Add(Me._tableABDI_JAYA_Cause_of_Inactivity)
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerialize_ABDI_JAYA_History_Sales() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Function ShouldSerialize_ABDI_JAYA_Cause_of_Inactivity() As Boolean
        Return False
    End Function

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As Abdi_JayaDataSet = New Abdi_JayaDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0

                        Do While ((s1.Position <> s1.Length) _
                                    AndAlso (s1.ReadByte = s2.ReadByte))


                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If

                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close()
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close()
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub _ABDI_JAYA_History_SalesRowChangeEventHandler(ByVal sender As Object, ByVal e As _ABDI_JAYA_History_SalesRowChangeEvent)

    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Delegate Sub _ABDI_JAYA_Cause_of_InactivityRowChangeEventHandler(ByVal sender As Object, ByVal e As _ABDI_JAYA_Cause_of_InactivityRowChangeEvent)

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class _ABDI_JAYA_History_SalesDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columntimestamp As Global.System.Data.DataColumn

        Private columnDocument_Type As Global.System.Data.DataColumn

        Private columnDocument_No_ As Global.System.Data.DataColumn

        Private columnLine_No_ As Global.System.Data.DataColumn

        Private columnDocument_Date As Global.System.Data.DataColumn

        Private columnPosting_Date As Global.System.Data.DataColumn

        Private columnLocation_Code As Global.System.Data.DataColumn

        Private columnCurrency_Code As Global.System.Data.DataColumn

        Private columnItem_No_ As Global.System.Data.DataColumn

        Private columnQuantity As Global.System.Data.DataColumn

        Private columnUnit_Price As Global.System.Data.DataColumn

        Private columnLine_Disc___ As Global.System.Data.DataColumn

        Private columnLine_Disc__Amt_ As Global.System.Data.DataColumn

        Private columnAmount As Global.System.Data.DataColumn

        Private columnPayment_Method_Code As Global.System.Data.DataColumn

        Private columnPayment_Type As Global.System.Data.DataColumn

        Private columnPayment_Name As Global.System.Data.DataColumn

        Private columnCard_No_ As Global.System.Data.DataColumn

        Private columnReference_No_ As Global.System.Data.DataColumn

        Private columnExternal_Document_No_ As Global.System.Data.DataColumn

        Private columnPosted_Document_No_ As Global.System.Data.DataColumn

        Private columnNote As Global.System.Data.DataColumn

        Private columnPosted As Global.System.Data.DataColumn

        Private _columnSell_to_Customer_No_ As Global.System.Data.DataColumn

        Private columnUnit_of_Measure_Code As Global.System.Data.DataColumn

        Private columnBar_Code As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ABDI JAYA$History Sales"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Document_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocument_Type
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Document_No_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocument_No_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Line_No_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLine_No_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Document_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDocument_Date
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Posting_DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosting_Date
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Location_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLocation_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Currency_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCurrency_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Item_No_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_No_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property QuantityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuantity
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Unit_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnit_Price
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Line_Disc___Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLine_Disc___
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Line_Disc__Amt_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnLine_Disc__Amt_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property AmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAmount
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Payment_Method_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayment_Method_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Payment_TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayment_Type
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Payment_NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPayment_Name
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Card_No_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnCard_No_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Reference_No_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnReference_No_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property External_Document_No_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnExternal_Document_No_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Posted_Document_No_Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosted_Document_No_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property NoteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNote
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property PostedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosted
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property _Sell_to_Customer_No_Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnSell_to_Customer_No_
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Unit_of_Measure_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnit_of_Measure_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Bar_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBar_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As _ABDI_JAYA_History_SalesRow
            Get
                Return CType(Me.Rows(index), _ABDI_JAYA_History_SalesRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event _ABDI_JAYA_History_SalesRowChanging As _ABDI_JAYA_History_SalesRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event _ABDI_JAYA_History_SalesRowChanged As _ABDI_JAYA_History_SalesRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event _ABDI_JAYA_History_SalesRowDeleting As _ABDI_JAYA_History_SalesRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event _ABDI_JAYA_History_SalesRowDeleted As _ABDI_JAYA_History_SalesRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub Add_ABDI_JAYA_History_SalesRow(ByVal row As _ABDI_JAYA_History_SalesRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function Add_ABDI_JAYA_History_SalesRow( _
                    ByVal timestamp() As Byte, _
                    ByVal Document_Type As Integer, _
                    ByVal Document_No_ As String, _
                    ByVal Line_No_ As Integer, _
                    ByVal Document_Date As Date, _
                    ByVal Posting_Date As Date, _
                    ByVal Location_Code As String, _
                    ByVal Currency_Code As String, _
                    ByVal Item_No_ As String, _
                    ByVal Quantity As Decimal, _
                    ByVal Unit_Price As Decimal, _
                    ByVal Line_Disc___ As Decimal, _
                    ByVal Line_Disc__Amt_ As Decimal, _
                    ByVal Amount As Decimal, _
                    ByVal Payment_Method_Code As String, _
                    ByVal Payment_Type As String, _
                    ByVal Payment_Name As String, _
                    ByVal Card_No_ As String, _
                    ByVal Reference_No_ As String, _
                    ByVal External_Document_No_ As String, _
                    ByVal Posted_Document_No_ As String, _
                    ByVal Note As String, _
                    ByVal Posted As Byte, _
                    ByVal _Sell_to_Customer_No_ As String, _
                    ByVal Unit_of_Measure_Code As String, _
                    ByVal Bar_Code As String) As _ABDI_JAYA_History_SalesRow
            Dim row_ABDI_JAYA_History_SalesRow As _ABDI_JAYA_History_SalesRow = CType(Me.NewRow, _ABDI_JAYA_History_SalesRow)
            Dim columnValuesArray() As Object = New Object() {timestamp, Document_Type, Document_No_, Line_No_, Document_Date, Posting_Date, Location_Code, Currency_Code, Item_No_, Quantity, Unit_Price, Line_Disc___, Line_Disc__Amt_, Amount, Payment_Method_Code, Payment_Type, Payment_Name, Card_No_, Reference_No_, External_Document_No_, Posted_Document_No_, Note, Posted, _Sell_to_Customer_No_, Unit_of_Measure_Code, Bar_Code}
            row_ABDI_JAYA_History_SalesRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_ABDI_JAYA_History_SalesRow)
            Return row_ABDI_JAYA_History_SalesRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByDocument_TypeDocument_No_Line_No_(ByVal Document_Type As Integer, ByVal Document_No_ As String, ByVal Line_No_ As Integer) As _ABDI_JAYA_History_SalesRow
            Return CType(Me.Rows.Find(New Object() {Document_Type, Document_No_, Line_No_}), _ABDI_JAYA_History_SalesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _ABDI_JAYA_History_SalesDataTable = CType(MyBase.Clone, _ABDI_JAYA_History_SalesDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _ABDI_JAYA_History_SalesDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columntimestamp = MyBase.Columns("timestamp")
            Me.columnDocument_Type = MyBase.Columns("Document Type")
            Me.columnDocument_No_ = MyBase.Columns("Document No_")
            Me.columnLine_No_ = MyBase.Columns("Line No_")
            Me.columnDocument_Date = MyBase.Columns("Document Date")
            Me.columnPosting_Date = MyBase.Columns("Posting Date")
            Me.columnLocation_Code = MyBase.Columns("Location Code")
            Me.columnCurrency_Code = MyBase.Columns("Currency Code")
            Me.columnItem_No_ = MyBase.Columns("Item No_")
            Me.columnQuantity = MyBase.Columns("Quantity")
            Me.columnUnit_Price = MyBase.Columns("Unit Price")
            Me.columnLine_Disc___ = MyBase.Columns("Line Disc_ _")
            Me.columnLine_Disc__Amt_ = MyBase.Columns("Line Disc_ Amt_")
            Me.columnAmount = MyBase.Columns("Amount")
            Me.columnPayment_Method_Code = MyBase.Columns("Payment Method Code")
            Me.columnPayment_Type = MyBase.Columns("Payment Type")
            Me.columnPayment_Name = MyBase.Columns("Payment Name")
            Me.columnCard_No_ = MyBase.Columns("Card No_")
            Me.columnReference_No_ = MyBase.Columns("Reference No_")
            Me.columnExternal_Document_No_ = MyBase.Columns("External Document No_")
            Me.columnPosted_Document_No_ = MyBase.Columns("Posted Document No_")
            Me.columnNote = MyBase.Columns("Note")
            Me.columnPosted = MyBase.Columns("Posted")
            Me._columnSell_to_Customer_No_ = MyBase.Columns("Sell-to Customer No_")
            Me.columnUnit_of_Measure_Code = MyBase.Columns("Unit of Measure Code")
            Me.columnBar_Code = MyBase.Columns("Bar Code")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columntimestamp = New Global.System.Data.DataColumn("timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp)
            Me.columnDocument_Type = New Global.System.Data.DataColumn("Document Type", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocument_Type)
            Me.columnDocument_No_ = New Global.System.Data.DataColumn("Document No_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocument_No_)
            Me.columnLine_No_ = New Global.System.Data.DataColumn("Line No_", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLine_No_)
            Me.columnDocument_Date = New Global.System.Data.DataColumn("Document Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDocument_Date)
            Me.columnPosting_Date = New Global.System.Data.DataColumn("Posting Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosting_Date)
            Me.columnLocation_Code = New Global.System.Data.DataColumn("Location Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLocation_Code)
            Me.columnCurrency_Code = New Global.System.Data.DataColumn("Currency Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCurrency_Code)
            Me.columnItem_No_ = New Global.System.Data.DataColumn("Item No_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_No_)
            Me.columnQuantity = New Global.System.Data.DataColumn("Quantity", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuantity)
            Me.columnUnit_Price = New Global.System.Data.DataColumn("Unit Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit_Price)
            Me.columnLine_Disc___ = New Global.System.Data.DataColumn("Line Disc_ _", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLine_Disc___)
            Me.columnLine_Disc__Amt_ = New Global.System.Data.DataColumn("Line Disc_ Amt_", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLine_Disc__Amt_)
            Me.columnAmount = New Global.System.Data.DataColumn("Amount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAmount)
            Me.columnPayment_Method_Code = New Global.System.Data.DataColumn("Payment Method Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayment_Method_Code)
            Me.columnPayment_Type = New Global.System.Data.DataColumn("Payment Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayment_Type)
            Me.columnPayment_Name = New Global.System.Data.DataColumn("Payment Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPayment_Name)
            Me.columnCard_No_ = New Global.System.Data.DataColumn("Card No_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCard_No_)
            Me.columnReference_No_ = New Global.System.Data.DataColumn("Reference No_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReference_No_)
            Me.columnExternal_Document_No_ = New Global.System.Data.DataColumn("External Document No_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExternal_Document_No_)
            Me.columnPosted_Document_No_ = New Global.System.Data.DataColumn("Posted Document No_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosted_Document_No_)
            Me.columnNote = New Global.System.Data.DataColumn("Note", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNote)
            Me.columnPosted = New Global.System.Data.DataColumn("Posted", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosted)
            Me._columnSell_to_Customer_No_ = New Global.System.Data.DataColumn("Sell-to Customer No_", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me._columnSell_to_Customer_No_.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnSell_to_Customer_No_")
            Me._columnSell_to_Customer_No_.ExtendedProperties.Add("Generator_UserColumnName", "Sell-to Customer No_")
            MyBase.Columns.Add(Me._columnSell_to_Customer_No_)
            Me.columnUnit_of_Measure_Code = New Global.System.Data.DataColumn("Unit of Measure Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit_of_Measure_Code)
            Me.columnBar_Code = New Global.System.Data.DataColumn("Bar Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBar_Code)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDocument_Type, Me.columnDocument_No_, Me.columnLine_No_}, True))
            Me.columntimestamp.ReadOnly = True
            Me.columnDocument_Type.AllowDBNull = False
            Me.columnDocument_No_.AllowDBNull = False
            Me.columnDocument_No_.MaxLength = 20
            Me.columnLine_No_.AllowDBNull = False
            Me.columnDocument_Date.AllowDBNull = False
            Me.columnPosting_Date.AllowDBNull = False
            Me.columnLocation_Code.AllowDBNull = False
            Me.columnLocation_Code.MaxLength = 20
            Me.columnCurrency_Code.AllowDBNull = False
            Me.columnCurrency_Code.MaxLength = 10
            Me.columnItem_No_.AllowDBNull = False
            Me.columnItem_No_.MaxLength = 20
            Me.columnQuantity.AllowDBNull = False
            Me.columnUnit_Price.AllowDBNull = False
            Me.columnLine_Disc___.AllowDBNull = False
            Me.columnLine_Disc__Amt_.AllowDBNull = False
            Me.columnAmount.AllowDBNull = False
            Me.columnPayment_Method_Code.AllowDBNull = False
            Me.columnPayment_Method_Code.MaxLength = 10
            Me.columnPayment_Type.AllowDBNull = False
            Me.columnPayment_Type.MaxLength = 20
            Me.columnPayment_Name.AllowDBNull = False
            Me.columnPayment_Name.MaxLength = 50
            Me.columnCard_No_.AllowDBNull = False
            Me.columnCard_No_.MaxLength = 50
            Me.columnReference_No_.AllowDBNull = False
            Me.columnReference_No_.MaxLength = 50
            Me.columnExternal_Document_No_.AllowDBNull = False
            Me.columnExternal_Document_No_.MaxLength = 20
            Me.columnPosted_Document_No_.AllowDBNull = False
            Me.columnPosted_Document_No_.MaxLength = 20
            Me.columnNote.AllowDBNull = False
            Me.columnNote.MaxLength = 200
            Me.columnPosted.AllowDBNull = False
            Me._columnSell_to_Customer_No_.AllowDBNull = False
            Me._columnSell_to_Customer_No_.MaxLength = 20
            Me.columnUnit_of_Measure_Code.AllowDBNull = False
            Me.columnUnit_of_Measure_Code.MaxLength = 10
            Me.columnBar_Code.AllowDBNull = False
            Me.columnBar_Code.MaxLength = 20
            Me.ExtendedProperties.Add("Generator_TableVarName", "_tableABDI_JAYA_History_Sales")
            Me.ExtendedProperties.Add("Generator_UserTableName", "ABDI JAYA$History Sales")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function New_ABDI_JAYA_History_SalesRow() As _ABDI_JAYA_History_SalesRow
            Return CType(Me.NewRow, _ABDI_JAYA_History_SalesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _ABDI_JAYA_History_SalesRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_ABDI_JAYA_History_SalesRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ABDI_JAYA_History_SalesRowChangedEvent) Is Nothing) Then
                RaiseEvent _ABDI_JAYA_History_SalesRowChanged(Me, New _ABDI_JAYA_History_SalesRowChangeEvent(CType(e.Row, _ABDI_JAYA_History_SalesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ABDI_JAYA_History_SalesRowChangingEvent) Is Nothing) Then
                RaiseEvent _ABDI_JAYA_History_SalesRowChanging(Me, New _ABDI_JAYA_History_SalesRowChangeEvent(CType(e.Row, _ABDI_JAYA_History_SalesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ABDI_JAYA_History_SalesRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ABDI_JAYA_History_SalesRowDeleted(Me, New _ABDI_JAYA_History_SalesRowChangeEvent(CType(e.Row, _ABDI_JAYA_History_SalesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ABDI_JAYA_History_SalesRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ABDI_JAYA_History_SalesRowDeleting(Me, New _ABDI_JAYA_History_SalesRowChangeEvent(CType(e.Row, _ABDI_JAYA_History_SalesRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub Remove_ABDI_JAYA_History_SalesRow(ByVal row As _ABDI_JAYA_History_SalesRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Abdi_JayaDataSet = New Abdi_JayaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_ABDI_JAYA_History_SalesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(), _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class _ABDI_JAYA_Cause_of_InactivityDataTable
        Inherits Global.System.Data.DataTable
        Implements Global.System.Collections.IEnumerable

        Private columntimestamp As Global.System.Data.DataColumn

        Private columnNo As Global.System.Data.DataColumn

        Private columnDescription_1 As Global.System.Data.DataColumn

        Private columnSearch_Description As Global.System.Data.DataColumn

        Private columnUnit_Price As Global.System.Data.DataColumn

        Private columnDescription_2 As Global.System.Data.DataColumn

        Private columnBase_Unit_of_Measure As Global.System.Data.DataColumn

        Private columnItem_Category_Code As Global.System.Data.DataColumn

        Private columnManufacturer_Code As Global.System.Data.DataColumn

        Private columnProduct_Group_Code As Global.System.Data.DataColumn

        Private columnVendor_No As Global.System.Data.DataColumn

        Private columnVendor_Item_No As Global.System.Data.DataColumn

        Private columnBlocked As Global.System.Data.DataColumn

        Private columnGlobal_Dimension_1_Code As Global.System.Data.DataColumn

        Private columnVariant As Global.System.Data.DataColumn

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ABDI JAYA$Cause of Inactivity"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property timestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columntimestamp
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNo
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Description_1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription_1
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Search_DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSearch_Description
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Unit_PriceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUnit_Price
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Description_2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription_2
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Base_Unit_of_MeasureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBase_Unit_of_Measure
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Item_Category_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnItem_Category_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Manufacturer_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManufacturer_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Product_Group_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProduct_Group_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Vendor_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendor_No
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Vendor_Item_NoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVendor_Item_No
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property BlockedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBlocked
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Global_Dimension_1_CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGlobal_Dimension_1_Code
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property VariantColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVariant
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As _ABDI_JAYA_Cause_of_InactivityRow
            Get
                Return CType(Me.Rows(index), _ABDI_JAYA_Cause_of_InactivityRow)
            End Get
        End Property

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event _ABDI_JAYA_Cause_of_InactivityRowChanging As _ABDI_JAYA_Cause_of_InactivityRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event _ABDI_JAYA_Cause_of_InactivityRowChanged As _ABDI_JAYA_Cause_of_InactivityRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event _ABDI_JAYA_Cause_of_InactivityRowDeleting As _ABDI_JAYA_Cause_of_InactivityRowChangeEventHandler

        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Event _ABDI_JAYA_Cause_of_InactivityRowDeleted As _ABDI_JAYA_Cause_of_InactivityRowChangeEventHandler

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Sub Add_ABDI_JAYA_Cause_of_InactivityRow(ByVal row As _ABDI_JAYA_Cause_of_InactivityRow)
            Me.Rows.Add(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overloads Function Add_ABDI_JAYA_Cause_of_InactivityRow(ByVal timestamp() As Byte, ByVal No As String, ByVal Description_1 As String, ByVal Search_Description As String, ByVal Unit_Price As Decimal, ByVal Description_2 As String, ByVal Base_Unit_of_Measure As String, ByVal Item_Category_Code As String, ByVal Manufacturer_Code As String, ByVal Product_Group_Code As String, ByVal Vendor_No As String, ByVal Vendor_Item_No As String, ByVal Blocked As Byte, ByVal Global_Dimension_1_Code As String, ByVal _Variant As String) As _ABDI_JAYA_Cause_of_InactivityRow
            Dim row_ABDI_JAYA_Cause_of_InactivityRow As _ABDI_JAYA_Cause_of_InactivityRow = CType(Me.NewRow, _ABDI_JAYA_Cause_of_InactivityRow)
            Dim columnValuesArray() As Object = New Object() {timestamp, No, Description_1, Search_Description, Unit_Price, Description_2, Base_Unit_of_Measure, Item_Category_Code, Manufacturer_Code, Product_Group_Code, Vendor_No, Vendor_Item_No, Blocked, Global_Dimension_1_Code, _Variant}
            row_ABDI_JAYA_Cause_of_InactivityRow.ItemArray = columnValuesArray
            Me.Rows.Add(row_ABDI_JAYA_Cause_of_InactivityRow)
            Return row_ABDI_JAYA_Cause_of_InactivityRow
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function FindByNo(ByVal No As String) As _ABDI_JAYA_Cause_of_InactivityRow
            Return CType(Me.Rows.Find(New Object() {No}), _ABDI_JAYA_Cause_of_InactivityRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As _ABDI_JAYA_Cause_of_InactivityDataTable = CType(MyBase.Clone, _ABDI_JAYA_Cause_of_InactivityDataTable)
            cln.InitVars()
            Return cln
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New _ABDI_JAYA_Cause_of_InactivityDataTable()
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub InitVars()
            Me.columntimestamp = MyBase.Columns("timestamp")
            Me.columnNo = MyBase.Columns("No")
            Me.columnDescription_1 = MyBase.Columns("Description 1")
            Me.columnSearch_Description = MyBase.Columns("Search Description")
            Me.columnUnit_Price = MyBase.Columns("Unit Price")
            Me.columnDescription_2 = MyBase.Columns("Description 2")
            Me.columnBase_Unit_of_Measure = MyBase.Columns("Base Unit of Measure")
            Me.columnItem_Category_Code = MyBase.Columns("Item Category Code")
            Me.columnManufacturer_Code = MyBase.Columns("Manufacturer Code")
            Me.columnProduct_Group_Code = MyBase.Columns("Product Group Code")
            Me.columnVendor_No = MyBase.Columns("Vendor No")
            Me.columnVendor_Item_No = MyBase.Columns("Vendor Item No")
            Me.columnBlocked = MyBase.Columns("Blocked")
            Me.columnGlobal_Dimension_1_Code = MyBase.Columns("Global Dimension 1 Code")
            Me.columnVariant = MyBase.Columns("Variant")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitClass()
            Me.columntimestamp = New Global.System.Data.DataColumn("timestamp", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columntimestamp)
            Me.columnNo = New Global.System.Data.DataColumn("No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNo)
            Me.columnDescription_1 = New Global.System.Data.DataColumn("Description 1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription_1)
            Me.columnSearch_Description = New Global.System.Data.DataColumn("Search Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSearch_Description)
            Me.columnUnit_Price = New Global.System.Data.DataColumn("Unit Price", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUnit_Price)
            Me.columnDescription_2 = New Global.System.Data.DataColumn("Description 2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription_2)
            Me.columnBase_Unit_of_Measure = New Global.System.Data.DataColumn("Base Unit of Measure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBase_Unit_of_Measure)
            Me.columnItem_Category_Code = New Global.System.Data.DataColumn("Item Category Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnItem_Category_Code)
            Me.columnManufacturer_Code = New Global.System.Data.DataColumn("Manufacturer Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManufacturer_Code)
            Me.columnProduct_Group_Code = New Global.System.Data.DataColumn("Product Group Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProduct_Group_Code)
            Me.columnVendor_No = New Global.System.Data.DataColumn("Vendor No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendor_No)
            Me.columnVendor_Item_No = New Global.System.Data.DataColumn("Vendor Item No", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVendor_Item_No)
            Me.columnBlocked = New Global.System.Data.DataColumn("Blocked", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBlocked)
            Me.columnGlobal_Dimension_1_Code = New Global.System.Data.DataColumn("Global Dimension 1 Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGlobal_Dimension_1_Code)
            Me.columnVariant = New Global.System.Data.DataColumn("Variant", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnVariant.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "VariantColumn")
            Me.columnVariant.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnVariant")
            Me.columnVariant.ExtendedProperties.Add("Generator_UserColumnName", "Variant")
            MyBase.Columns.Add(Me.columnVariant)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnNo}, True))
            Me.columntimestamp.ReadOnly = True
            Me.columnNo.AllowDBNull = False
            Me.columnNo.Unique = True
            Me.columnNo.MaxLength = 20
            Me.columnDescription_1.AllowDBNull = False
            Me.columnDescription_1.MaxLength = 50
            Me.columnSearch_Description.AllowDBNull = False
            Me.columnSearch_Description.MaxLength = 50
            Me.columnUnit_Price.AllowDBNull = False
            Me.columnDescription_2.AllowDBNull = False
            Me.columnDescription_2.MaxLength = 50
            Me.columnBase_Unit_of_Measure.AllowDBNull = False
            Me.columnBase_Unit_of_Measure.MaxLength = 10
            Me.columnItem_Category_Code.AllowDBNull = False
            Me.columnItem_Category_Code.MaxLength = 10
            Me.columnManufacturer_Code.AllowDBNull = False
            Me.columnManufacturer_Code.MaxLength = 10
            Me.columnProduct_Group_Code.AllowDBNull = False
            Me.columnProduct_Group_Code.MaxLength = 10
            Me.columnVendor_No.AllowDBNull = False
            Me.columnVendor_No.MaxLength = 20
            Me.columnVendor_Item_No.AllowDBNull = False
            Me.columnVendor_Item_No.MaxLength = 20
            Me.columnBlocked.AllowDBNull = False
            Me.columnGlobal_Dimension_1_Code.AllowDBNull = False
            Me.columnGlobal_Dimension_1_Code.MaxLength = 20
            Me.columnVariant.AllowDBNull = False
            Me.columnVariant.MaxLength = 10
            Me.ExtendedProperties.Add("Generator_TableVarName", "_tableABDI_JAYA_Cause_of_Inactivity")
            Me.ExtendedProperties.Add("Generator_UserTableName", "ABDI JAYA$Cause of Inactivity")
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function New_ABDI_JAYA_Cause_of_InactivityRow() As _ABDI_JAYA_Cause_of_InactivityRow
            Return CType(Me.NewRow, _ABDI_JAYA_Cause_of_InactivityRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New _ABDI_JAYA_Cause_of_InactivityRow(builder)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(_ABDI_JAYA_Cause_of_InactivityRow)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me._ABDI_JAYA_Cause_of_InactivityRowChangedEvent) Is Nothing) Then
                RaiseEvent _ABDI_JAYA_Cause_of_InactivityRowChanged(Me, New _ABDI_JAYA_Cause_of_InactivityRowChangeEvent(CType(e.Row, _ABDI_JAYA_Cause_of_InactivityRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me._ABDI_JAYA_Cause_of_InactivityRowChangingEvent) Is Nothing) Then
                RaiseEvent _ABDI_JAYA_Cause_of_InactivityRowChanging(Me, New _ABDI_JAYA_Cause_of_InactivityRowChangeEvent(CType(e.Row, _ABDI_JAYA_Cause_of_InactivityRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me._ABDI_JAYA_Cause_of_InactivityRowDeletedEvent) Is Nothing) Then
                RaiseEvent _ABDI_JAYA_Cause_of_InactivityRowDeleted(Me, New _ABDI_JAYA_Cause_of_InactivityRowChangeEvent(CType(e.Row, _ABDI_JAYA_Cause_of_InactivityRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me._ABDI_JAYA_Cause_of_InactivityRowDeletingEvent) Is Nothing) Then
                RaiseEvent _ABDI_JAYA_Cause_of_InactivityRowDeleting(Me, New _ABDI_JAYA_Cause_of_InactivityRowChangeEvent(CType(e.Row, _ABDI_JAYA_Cause_of_InactivityRow), e.Action))
            End If
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub Remove_ABDI_JAYA_Cause_of_InactivityRow(ByVal row As _ABDI_JAYA_Cause_of_InactivityRow)
            Me.Rows.Remove(row)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As Abdi_JayaDataSet = New Abdi_JayaDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "_ABDI_JAYA_Cause_of_InactivityDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current, Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0

                            Do While ((s1.Position <> s1.Length) _
                                        AndAlso (s1.ReadByte = s2.ReadByte))


                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If

                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close()
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close()
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class _ABDI_JAYA_History_SalesRow
        Inherits Global.System.Data.DataRow

        Private _tableABDI_JAYA_History_Sales As _ABDI_JAYA_History_SalesDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me._tableABDI_JAYA_History_Sales = CType(Me.Table, _ABDI_JAYA_History_SalesDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property timestamp() As Byte()
            Get
                Try
                    Return CType(Me(Me._tableABDI_JAYA_History_Sales.timestampColumn), Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp' in table 'ABDI JAYA$History Sales' is DBNull.", e)
                End Try
            End Get
            Set(value As Byte())
                Me(Me._tableABDI_JAYA_History_Sales.timestampColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Document_Type() As Integer
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Document_TypeColumn), Integer)
            End Get
            Set(value As Integer)
                Me(Me._tableABDI_JAYA_History_Sales.Document_TypeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Document_No_() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Document_No_Column), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Document_No_Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Line_No_() As Integer
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Line_No_Column), Integer)
            End Get
            Set(value As Integer)
                Me(Me._tableABDI_JAYA_History_Sales.Line_No_Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Document_Date() As Date
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Document_DateColumn), Date)
            End Get
            Set(value As Date)
                Me(Me._tableABDI_JAYA_History_Sales.Document_DateColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Posting_Date() As Date
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Posting_DateColumn), Date)
            End Get
            Set(value As Date)
                Me(Me._tableABDI_JAYA_History_Sales.Posting_DateColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Location_Code() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Location_CodeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Location_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Currency_Code() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Currency_CodeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Currency_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Item_No_() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Item_No_Column), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Item_No_Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Quantity() As Decimal
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.QuantityColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me._tableABDI_JAYA_History_Sales.QuantityColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Unit_Price() As Decimal
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Unit_PriceColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me._tableABDI_JAYA_History_Sales.Unit_PriceColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Line_Disc___() As Decimal
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Line_Disc___Column), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me._tableABDI_JAYA_History_Sales.Line_Disc___Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Line_Disc__Amt_() As Decimal
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Line_Disc__Amt_Column), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me._tableABDI_JAYA_History_Sales.Line_Disc__Amt_Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Amount() As Decimal
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.AmountColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me._tableABDI_JAYA_History_Sales.AmountColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Payment_Method_Code() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Payment_Method_CodeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Payment_Method_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Payment_Type() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Payment_TypeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Payment_TypeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Payment_Name() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Payment_NameColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Payment_NameColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Card_No_() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Card_No_Column), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Card_No_Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Reference_No_() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Reference_No_Column), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Reference_No_Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property External_Document_No_() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.External_Document_No_Column), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.External_Document_No_Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Posted_Document_No_() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Posted_Document_No_Column), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Posted_Document_No_Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Note() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.NoteColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.NoteColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Posted() As Byte
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.PostedColumn), Byte)
            End Get
            Set(value As Byte)
                Me(Me._tableABDI_JAYA_History_Sales.PostedColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property _Sell_to_Customer_No_() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales._Sell_to_Customer_No_Column), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales._Sell_to_Customer_No_Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Unit_of_Measure_Code() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Unit_of_Measure_CodeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Unit_of_Measure_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Bar_Code() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_History_Sales.Bar_CodeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_History_Sales.Bar_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IstimestampNull() As Boolean
            Return Me.IsNull(Me._tableABDI_JAYA_History_Sales.timestampColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SettimestampNull()
            Me(Me._tableABDI_JAYA_History_Sales.timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class _ABDI_JAYA_Cause_of_InactivityRow
        Inherits Global.System.Data.DataRow

        Private _tableABDI_JAYA_Cause_of_Inactivity As _ABDI_JAYA_Cause_of_InactivityDataTable

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me._tableABDI_JAYA_Cause_of_Inactivity = CType(Me.Table, _ABDI_JAYA_Cause_of_InactivityDataTable)
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property timestamp() As Byte()
            Get
                Try
                    Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.timestampColumn), Byte())
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'timestamp' in table 'ABDI JAYA$Cause of Inactivity' is DBNu" & _
                            "ll.", e)
                End Try
            End Get
            Set(value As Byte())
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.timestampColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property No() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.NoColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.NoColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Description_1() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Description_1Column), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Description_1Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Search_Description() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Search_DescriptionColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Search_DescriptionColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Unit_Price() As Decimal
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Unit_PriceColumn), Decimal)
            End Get
            Set(value As Decimal)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Unit_PriceColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Description_2() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Description_2Column), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Description_2Column) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Base_Unit_of_Measure() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Base_Unit_of_MeasureColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Base_Unit_of_MeasureColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Item_Category_Code() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Item_Category_CodeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Item_Category_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Manufacturer_Code() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Manufacturer_CodeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Manufacturer_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Product_Group_Code() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Product_Group_CodeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Product_Group_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Vendor_No() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Vendor_NoColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Vendor_NoColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Vendor_Item_No() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Vendor_Item_NoColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Vendor_Item_NoColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Blocked() As Byte
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.BlockedColumn), Byte)
            End Get
            Set(value As Byte)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.BlockedColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property Global_Dimension_1_Code() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Global_Dimension_1_CodeColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.Global_Dimension_1_CodeColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property _Variant() As String
            Get
                Return CType(Me(Me._tableABDI_JAYA_Cause_of_Inactivity.VariantColumn), String)
            End Get
            Set(value As String)
                Me(Me._tableABDI_JAYA_Cause_of_Inactivity.VariantColumn) = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Function IstimestampNull() As Boolean
            Return Me.IsNull(Me._tableABDI_JAYA_Cause_of_Inactivity.timestampColumn)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub SettimestampNull()
            Me(Me._tableABDI_JAYA_Cause_of_Inactivity.timestampColumn) = Global.System.Convert.DBNull
        End Sub
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class _ABDI_JAYA_History_SalesRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As _ABDI_JAYA_History_SalesRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As _ABDI_JAYA_History_SalesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As _ABDI_JAYA_History_SalesRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class

    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
    Public Class _ABDI_JAYA_Cause_of_InactivityRowChangeEvent
        Inherits Global.System.EventArgs

        Private eventRow As _ABDI_JAYA_Cause_of_InactivityRow

        Private eventAction As Global.System.Data.DataRowAction

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New(ByVal row As _ABDI_JAYA_Cause_of_InactivityRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New()
            Me.eventRow = row
            Me.eventAction = action
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Row() As _ABDI_JAYA_Cause_of_InactivityRow
            Get
                Return Me.eventRow
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace Abdi_JayaDataSetTableAdapters

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class ABDI_JAYA_History_SalesTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ABDI JAYA$History Sales"
            tableMapping.ColumnMappings.Add("timestamp", "timestamp")
            tableMapping.ColumnMappings.Add("Document Type", "Document Type")
            tableMapping.ColumnMappings.Add("Document No_", "Document No_")
            tableMapping.ColumnMappings.Add("Line No_", "Line No_")
            tableMapping.ColumnMappings.Add("Document Date", "Document Date")
            tableMapping.ColumnMappings.Add("Posting Date", "Posting Date")
            tableMapping.ColumnMappings.Add("Location Code", "Location Code")
            tableMapping.ColumnMappings.Add("Currency Code", "Currency Code")
            tableMapping.ColumnMappings.Add("Item No_", "Item No_")
            tableMapping.ColumnMappings.Add("Quantity", "Quantity")
            tableMapping.ColumnMappings.Add("Unit Price", "Unit Price")
            tableMapping.ColumnMappings.Add("Line Disc_ _", "Line Disc_ _")
            tableMapping.ColumnMappings.Add("Line Disc_ Amt_", "Line Disc_ Amt_")
            tableMapping.ColumnMappings.Add("Amount", "Amount")
            tableMapping.ColumnMappings.Add("Payment Method Code", "Payment Method Code")
            tableMapping.ColumnMappings.Add("Payment Type", "Payment Type")
            tableMapping.ColumnMappings.Add("Payment Name", "Payment Name")
            tableMapping.ColumnMappings.Add("Card No_", "Card No_")
            tableMapping.ColumnMappings.Add("Reference No_", "Reference No_")
            tableMapping.ColumnMappings.Add("External Document No_", "External Document No_")
            tableMapping.ColumnMappings.Add("Posted Document No_", "Posted Document No_")
            tableMapping.ColumnMappings.Add("Note", "Note")
            tableMapping.ColumnMappings.Add("Posted", "Posted")
            tableMapping.ColumnMappings.Add("Sell-to Customer No_", "Sell-to Customer No_")
            tableMapping.ColumnMappings.Add("Unit of Measure Code", "Unit of Measure Code")
            tableMapping.ColumnMappings.Add("Bar Code", "Bar Code")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ABDI JAYA$History Sales] WHERE (([timestamp] = @Original_times" & _
                "tamp) AND ([Document Type] = @Original_Document_Type) AND ([Document No_] = @Ori" & _
                "ginal_Document_No_) AND ([Line No_] = @Original_Line_No_))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Document_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document Type", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Document_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document No_", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Line_No_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Line No_", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ABDI JAYA$History Sales] ([Document Type], [Document No_], [Li" & _
                "ne No_], [Document Date], [Posting Date], [Location Code], [Currency Code], [Ite" & _
                "m No_], [Quantity], [Unit Price], [Line Disc_ _], [Line Disc_ Amt_], [Amount], [" & _
                "Payment Method Code], [Payment Type], [Payment Name], [Card No_], [Reference No_" & _
                "], [External Document No_], [Posted Document No_], [Note], [Posted], [Sell-to Cu" & _
                "stomer No_], [Unit of Measure Code], [Bar Code]) VALUES (@Document_Type, @Docume" & _
                "nt_No_, @Line_No_, @Document_Date, @Posting_Date, @Location_Code, @Currency_Code" & _
                ", @Item_No_, @Quantity, @Unit_Price, @Line_Disc___, @Line_Disc__Amt_, @Amount, @" & _
                "Payment_Method_Code, @Payment_Type, @Payment_Name, @Card_No_, @Reference_No_, @E" & _
                "xternal_Document_No_, @Posted_Document_No_, @Note, @Posted, @p1, @Unit_of_Measur" & _
                "e_Code, @Bar_Code);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT timestamp, [Document Type], [Document No_], [Line No" & _
                "_], [Document Date], [Posting Date], [Location Code], [Currency Code], [Item No_" & _
                "], Quantity, [Unit Price], [Line Disc_ _], [Line Disc_ Amt_], Amount, [Payment M" & _
                "ethod Code], [Payment Type], [Payment Name], [Card No_], [Reference No_], [Exter" & _
                "nal Document No_], [Posted Document No_], Note, Posted, [Sell-to Customer No_], " & _
                "[Unit of Measure Code], [Bar Code] FROM [ABDI JAYA$History Sales] WHERE ([Docume" & _
                "nt No_] = @Document_No_) AND ([Document Type] = @Document_Type) AND ([Line No_] " & _
                "= @Line_No_)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Document_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document Type", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Document_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Line_No_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Line No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Document_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document Date", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posting_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posting Date", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Currency_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Currency Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Quantity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unit_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Unit Price", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Line_Disc___", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Line Disc_ _", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Line_Disc__Amt_", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Line Disc_ Amt_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Amount", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Payment_Method_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Payment Method Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Payment_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Payment Type", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Payment_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Payment Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Card_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Card No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reference_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@External_Document_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "External Document No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posted_Document_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posted Document No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posted", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posted", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sell-to Customer No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unit_of_Measure_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unit of Measure Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bar_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bar Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ABDI JAYA$History Sales] SET [Document Type] = @Document_Type, [Doc" & _
                "ument No_] = @Document_No_, [Line No_] = @Line_No_, [Document Date] = @Document_" & _
                "Date, [Posting Date] = @Posting_Date, [Location Code] = @Location_Code, [Currenc" & _
                "y Code] = @Currency_Code, [Item No_] = @Item_No_, [Quantity] = @Quantity, [Unit " & _
                "Price] = @Unit_Price, [Line Disc_ _] = @Line_Disc___, [Line Disc_ Amt_] = @Line_" & _
                "Disc__Amt_, [Amount] = @Amount, [Payment Method Code] = @Payment_Method_Code, [P" & _
                "ayment Type] = @Payment_Type, [Payment Name] = @Payment_Name, [Card No_] = @Card" & _
                "_No_, [Reference No_] = @Reference_No_, [External Document No_] = @External_Docu" & _
                "ment_No_, [Posted Document No_] = @Posted_Document_No_, [Note] = @Note, [Posted]" & _
                " = @Posted, [Sell-to Customer No_] = @p1, [Unit of Measure Code] = @Unit_of_Meas" & _
                "ure_Code, [Bar Code] = @Bar_Code WHERE (([timestamp] = @Original_timestamp) AND " & _
                "([Document Type] = @Original_Document_Type) AND ([Document No_] = @Original_Docu" & _
                "ment_No_) AND ([Line No_] = @Original_Line_No_));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT timestamp, [Document T" & _
                "ype], [Document No_], [Line No_], [Document Date], [Posting Date], [Location Cod" & _
                "e], [Currency Code], [Item No_], Quantity, [Unit Price], [Line Disc_ _], [Line D" & _
                "isc_ Amt_], Amount, [Payment Method Code], [Payment Type], [Payment Name], [Card" & _
                " No_], [Reference No_], [External Document No_], [Posted Document No_], Note, Po" & _
                "sted, [Sell-to Customer No_], [Unit of Measure Code], [Bar Code] FROM [ABDI JAYA" & _
                "$History Sales] WHERE ([Document No_] = @Document_No_) AND ([Document Type] = @D" & _
                "ocument_Type) AND ([Line No_] = @Line_No_)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Document_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document Type", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Document_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Line_No_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Line No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Document_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document Date", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posting_Date", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posting Date", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Location_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Location Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Currency_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Currency Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Quantity", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Quantity", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unit_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Unit Price", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Line_Disc___", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Line Disc_ _", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Line_Disc__Amt_", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Line Disc_ Amt_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Amount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Amount", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Payment_Method_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Payment Method Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Payment_Type", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Payment Type", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Payment_Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Payment Name", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Card_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Card No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Reference_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Reference No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@External_Document_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "External Document No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posted_Document_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posted Document No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Note", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Note", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Posted", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Posted", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sell-to Customer No_", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unit_of_Measure_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Unit of Measure Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Bar_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Bar Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Document_Type", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document Type", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Document_No_", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Document No_", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_Line_No_", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Line No_", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WSPOSAgent.My.MySettings.Default.Abdi_JayaConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT timestamp, [Document Type], [Document No_], [Line No_], [Document Date], [" & _
                "Posting Date], [Location Code], [Currency Code], [Item No_], Quantity, [Unit Pri" & _
                "ce], [Line Disc_ _], [Line Disc_ Amt_], Amount, [Payment Method Code], [Payment " & _
                "Type], [Payment Name], [Card No_], [Reference No_], [External Document No_], [Po" & _
                "sted Document No_], Note, Posted, [Sell-to Customer No_], [Unit of Measure Code]" & _
                ", [Bar Code] FROM dbo.[ABDI JAYA$History Sales]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As Abdi_JayaDataSet._ABDI_JAYA_History_SalesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As Abdi_JayaDataSet._ABDI_JAYA_History_SalesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Abdi_JayaDataSet._ABDI_JAYA_History_SalesDataTable = New Abdi_JayaDataSet._ABDI_JAYA_History_SalesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As Abdi_JayaDataSet._ABDI_JAYA_History_SalesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As Abdi_JayaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ABDI JAYA$History Sales")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_timestamp() As Byte, ByVal Original_Document_Type As Integer, ByVal Original_Document_No_ As String, ByVal Original_Line_No_ As Integer) As Integer
            If (Original_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp, Byte())
            End If
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_Document_Type, Integer)
            If (Original_Document_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Document_No_")
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_Document_No_, String)
            End If
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_Line_No_, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert( _
                    ByVal Document_Type As Integer, _
                    ByVal Document_No_ As String, _
                    ByVal Line_No_ As Integer, _
                    ByVal Document_Date As Date, _
                    ByVal Posting_Date As Date, _
                    ByVal Location_Code As String, _
                    ByVal Currency_Code As String, _
                    ByVal Item_No_ As String, _
                    ByVal Quantity As Decimal, _
                    ByVal Unit_Price As Decimal, _
                    ByVal Line_Disc___ As Decimal, _
                    ByVal Line_Disc__Amt_ As Decimal, _
                    ByVal Amount As Decimal, _
                    ByVal Payment_Method_Code As String, _
                    ByVal Payment_Type As String, _
                    ByVal Payment_Name As String, _
                    ByVal Card_No_ As String, _
                    ByVal Reference_No_ As String, _
                    ByVal External_Document_No_ As String, _
                    ByVal Posted_Document_No_ As String, _
                    ByVal Note As String, _
                    ByVal Posted As Byte, _
                    ByVal p1 As String, _
                    ByVal Unit_of_Measure_Code As String, _
                    ByVal Bar_Code As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(Document_Type, Integer)
            If (Document_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Document_No_")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Document_No_, String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(Line_No_, Integer)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Document_Date, Date)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(Posting_Date, Date)
            If (Location_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Location_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Location_Code, String)
            End If
            If (Currency_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Currency_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Currency_Code, String)
            End If
            If (Item_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Item_No_")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Item_No_, String)
            End If
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(Quantity, Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Unit_Price, Decimal)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(Line_Disc___, Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(Line_Disc__Amt_, Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(Amount, Decimal)
            If (Payment_Method_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Payment_Method_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(Payment_Method_Code, String)
            End If
            If (Payment_Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Payment_Type")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(Payment_Type, String)
            End If
            If (Payment_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Payment_Name")
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Payment_Name, String)
            End If
            If (Card_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Card_No_")
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Card_No_, String)
            End If
            If (Reference_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Reference_No_")
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Reference_No_, String)
            End If
            If (External_Document_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("External_Document_No_")
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(External_Document_No_, String)
            End If
            If (Posted_Document_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Posted_Document_No_")
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(Posted_Document_No_, String)
            End If
            If (Note Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Note")
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Note, String)
            End If
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(Posted, Byte)
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(p1, String)
            End If
            If (Unit_of_Measure_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Unit_of_Measure_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(Unit_of_Measure_Code, String)
            End If
            If (Bar_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Bar_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(Bar_Code, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal Document_Type As Integer, _
                    ByVal Document_No_ As String, _
                    ByVal Line_No_ As Integer, _
                    ByVal Document_Date As Date, _
                    ByVal Posting_Date As Date, _
                    ByVal Location_Code As String, _
                    ByVal Currency_Code As String, _
                    ByVal Item_No_ As String, _
                    ByVal Quantity As Decimal, _
                    ByVal Unit_Price As Decimal, _
                    ByVal Line_Disc___ As Decimal, _
                    ByVal Line_Disc__Amt_ As Decimal, _
                    ByVal Amount As Decimal, _
                    ByVal Payment_Method_Code As String, _
                    ByVal Payment_Type As String, _
                    ByVal Payment_Name As String, _
                    ByVal Card_No_ As String, _
                    ByVal Reference_No_ As String, _
                    ByVal External_Document_No_ As String, _
                    ByVal Posted_Document_No_ As String, _
                    ByVal Note As String, _
                    ByVal Posted As Byte, _
                    ByVal p1 As String, _
                    ByVal Unit_of_Measure_Code As String, _
                    ByVal Bar_Code As String, _
                    ByVal Original_timestamp() As Byte, _
                    ByVal Original_Document_Type As Integer, _
                    ByVal Original_Document_No_ As String, _
                    ByVal Original_Line_No_ As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(Document_Type, Integer)
            If (Document_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Document_No_")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Document_No_, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Line_No_, Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Document_Date, Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Posting_Date, Date)
            If (Location_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Location_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Location_Code, String)
            End If
            If (Currency_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Currency_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Currency_Code, String)
            End If
            If (Item_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Item_No_")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Item_No_, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Quantity, Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Unit_Price, Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Line_Disc___, Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Line_Disc__Amt_, Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Amount, Decimal)
            If (Payment_Method_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Payment_Method_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Payment_Method_Code, String)
            End If
            If (Payment_Type Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Payment_Type")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Payment_Type, String)
            End If
            If (Payment_Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Payment_Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Payment_Name, String)
            End If
            If (Card_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Card_No_")
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Card_No_, String)
            End If
            If (Reference_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Reference_No_")
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Reference_No_, String)
            End If
            If (External_Document_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("External_Document_No_")
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(External_Document_No_, String)
            End If
            If (Posted_Document_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Posted_Document_No_")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Posted_Document_No_, String)
            End If
            If (Note Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Note")
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Note, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Posted, Byte)
            If (p1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("p1")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(p1, String)
            End If
            If (Unit_of_Measure_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Unit_of_Measure_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Unit_of_Measure_Code, String)
            End If
            If (Bar_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Bar_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Bar_Code, String)
            End If
            If (Original_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_timestamp, Byte())
            End If
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_Document_Type, Integer)
            If (Original_Document_No_ Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_Document_No_")
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_Document_No_, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_Line_No_, Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal Document_Date As Date, _
                    ByVal Posting_Date As Date, _
                    ByVal Location_Code As String, _
                    ByVal Currency_Code As String, _
                    ByVal Item_No_ As String, _
                    ByVal Quantity As Decimal, _
                    ByVal Unit_Price As Decimal, _
                    ByVal Line_Disc___ As Decimal, _
                    ByVal Line_Disc__Amt_ As Decimal, _
                    ByVal Amount As Decimal, _
                    ByVal Payment_Method_Code As String, _
                    ByVal Payment_Type As String, _
                    ByVal Payment_Name As String, _
                    ByVal Card_No_ As String, _
                    ByVal Reference_No_ As String, _
                    ByVal External_Document_No_ As String, _
                    ByVal Posted_Document_No_ As String, _
                    ByVal Note As String, _
                    ByVal Posted As Byte, _
                    ByVal p1 As String, _
                    ByVal Unit_of_Measure_Code As String, _
                    ByVal Bar_Code As String, _
                    ByVal Original_timestamp() As Byte, _
                    ByVal Original_Document_Type As Integer, _
                    ByVal Original_Document_No_ As String, _
                    ByVal Original_Line_No_ As Integer) As Integer
            Return Me.Update(Original_Document_Type, Original_Document_No_, Original_Line_No_, Document_Date, Posting_Date, Location_Code, Currency_Code, Item_No_, Quantity, Unit_Price, Line_Disc___, Line_Disc__Amt_, Amount, Payment_Method_Code, Payment_Type, Payment_Name, Card_No_, Reference_No_, External_Document_No_, Posted_Document_No_, Note, Posted, p1, Unit_of_Measure_Code, Bar_Code, Original_timestamp, Original_Document_Type, Original_Document_No_, Original_Line_No_)
        End Function
    End Class

    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DataObjectAttribute(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" & _
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
    Partial Public Class ABDI_JAYA_Cause_of_InactivityTableAdapter
        Inherits Global.System.ComponentModel.Component

        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter

        Private _connection As Global.System.Data.SqlClient.SqlConnection

        Private _transaction As Global.System.Data.SqlClient.SqlTransaction

        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand

        Private _clearBeforeFill As Boolean

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Sub New()
            MyBase.New()
            Me.ClearBeforeFill = True
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter()
                End If
                Return Me._adapter
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection()
                End If
                Return Me._connection
            End Get
            Set(value As Global.System.Data.SqlClient.SqlConnection)
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i), Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set(value As Global.System.Data.SqlClient.SqlTransaction)
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing) _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection()
                End If
                Return Me._commandCollection
            End Get
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set(value As Boolean)
                Me._clearBeforeFill = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ABDI JAYA$Cause of Inactivity"
            tableMapping.ColumnMappings.Add("timestamp", "timestamp")
            tableMapping.ColumnMappings.Add("No", "No")
            tableMapping.ColumnMappings.Add("Description 1", "Description 1")
            tableMapping.ColumnMappings.Add("Search Description", "Search Description")
            tableMapping.ColumnMappings.Add("Unit Price", "Unit Price")
            tableMapping.ColumnMappings.Add("Description 2", "Description 2")
            tableMapping.ColumnMappings.Add("Base Unit of Measure", "Base Unit of Measure")
            tableMapping.ColumnMappings.Add("Item Category Code", "Item Category Code")
            tableMapping.ColumnMappings.Add("Manufacturer Code", "Manufacturer Code")
            tableMapping.ColumnMappings.Add("Product Group Code", "Product Group Code")
            tableMapping.ColumnMappings.Add("Vendor No", "Vendor No")
            tableMapping.ColumnMappings.Add("Vendor Item No", "Vendor Item No")
            tableMapping.ColumnMappings.Add("Blocked", "Blocked")
            tableMapping.ColumnMappings.Add("Global Dimension 1 Code", "Global Dimension 1 Code")
            tableMapping.ColumnMappings.Add("Variant", "Variant")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [ABDI JAYA$Cause of Inactivity] WHERE (([timestamp] = @Original_times" & _
                "tamp) AND ([No] = @Original_No))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [ABDI JAYA$Cause of Inactivity] ([No], [Description 1], [Search Descr" & _
                "iption], [Unit Price], [Description 2], [Base Unit of Measure], [Item Category C" & _
                "ode], [Manufacturer Code], [Product Group Code], [Vendor No], [Vendor Item No], " & _
                "[Blocked], [Global Dimension 1 Code], [Variant]) VALUES (@No, @Description_1, @S" & _
                "earch_Description, @Unit_Price, @Description_2, @Base_Unit_of_Measure, @Item_Cat" & _
                "egory_Code, @Manufacturer_Code, @Product_Group_Code, @Vendor_No, @Vendor_Item_No" & _
                ", @Blocked, @Global_Dimension_1_Code, @Variant);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT timestamp, No, [Descrip" & _
                "tion 1], [Search Description], [Unit Price], [Description 2], [Base Unit of Meas" & _
                "ure], [Item Category Code], [Manufacturer Code], [Product Group Code], [Vendor N" & _
                "o], [Vendor Item No], Blocked, [Global Dimension 1 Code], Variant FROM [ABDI JAY" & _
                "A$Cause of Inactivity] WHERE (No = @No)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description 1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Search_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Search Description", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unit_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Unit Price", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description 2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Base_Unit_of_Measure", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Base Unit of Measure", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_Category_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item Category Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Manufacturer_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Manufacturer Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Group_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product Group Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Vendor_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vendor No", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Vendor_Item_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vendor Item No", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Blocked", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Blocked", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Global_Dimension_1_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Global Dimension 1 Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Variant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Variant", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [ABDI JAYA$Cause of Inactivity] SET [No] = @No, [Description 1] = @Descrip" & _
                "tion_1, [Search Description] = @Search_Description, [Unit Price] = @Unit_Price, " & _
                "[Description 2] = @Description_2, [Base Unit of Measure] = @Base_Unit_of_Measure" & _
                ", [Item Category Code] = @Item_Category_Code, [Manufacturer Code] = @Manufacture" & _
                "r_Code, [Product Group Code] = @Product_Group_Code, [Vendor No] = @Vendor_No, [V" & _
                "endor Item No] = @Vendor_Item_No, [Blocked] = @Blocked, [Global Dimension 1 Code" & _
                "] = @Global_Dimension_1_Code, [Variant] = @Variant WHERE (([timestamp] = @Origin" & _
                "al_timestamp) AND ([No] = @Original_No));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT timestamp, No, [Description 1]" & _
                ", [Search Description], [Unit Price], [Description 2], [Base Unit of Measure], [" & _
                "Item Category Code], [Manufacturer Code], [Product Group Code], [Vendor No], [Ve" & _
                "ndor Item No], Blocked, [Global Dimension 1 Code], Variant FROM [ABDI JAYA$Cause" & _
                " of Inactivity] WHERE (No = @No)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description_1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description 1", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Search_Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Search Description", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Unit_Price", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 38, 20, "Unit Price", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description_2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description 2", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Base_Unit_of_Measure", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Base Unit of Measure", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Item_Category_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Item Category Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Manufacturer_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Manufacturer Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Product_Group_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Product Group Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Vendor_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vendor No", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Vendor_Item_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Vendor Item No", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Blocked", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Blocked", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Global_Dimension_1_Code", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Global Dimension 1 Code", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Variant", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Variant", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_timestamp", Global.System.Data.SqlDbType.Timestamp, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "timestamp", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_No", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "No", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.WSPOSAgent.My.MySettings.Default.Abdi_JayaConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT        timestamp, No, [Description 1], [Search Description], [Unit Price]," & _
                " [Description 2], [Base Unit of Measure], [Item Category Code], [Manufacturer Co" & _
                "de], [Product Group Code], [Vendor No], [Vendor Item No], Blocked, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "           " & _
                "              [Global Dimension 1 Code], Variant" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM            [ABDI JAYA$Cau" & _
                "se of Inactivity]"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As Abdi_JayaDataSet._ABDI_JAYA_Cause_of_InactivityDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], True)> _
        Public Overridable Overloads Function GetData() As Abdi_JayaDataSet._ABDI_JAYA_Cause_of_InactivityDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As Abdi_JayaDataSet._ABDI_JAYA_Cause_of_InactivityDataTable = New Abdi_JayaDataSet._ABDI_JAYA_Cause_of_InactivityDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataTable As Abdi_JayaDataSet._ABDI_JAYA_Cause_of_InactivityDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataSet As Abdi_JayaDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ABDI JAYA$Cause of Inactivity")
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")> _
        Public Overridable Overloads Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, True)> _
        Public Overridable Overloads Function Delete(ByVal Original_timestamp() As Byte, ByVal Original_No As String) As Integer
            If (Original_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_timestamp, Byte())
            End If
            If (Original_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_No")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_No, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, True)> _
        Public Overridable Overloads Function Insert(ByVal No As String, ByVal Description_1 As String, ByVal Search_Description As String, ByVal Unit_Price As Decimal, ByVal Description_2 As String, ByVal Base_Unit_of_Measure As String, ByVal Item_Category_Code As String, ByVal Manufacturer_Code As String, ByVal Product_Group_Code As String, ByVal Vendor_No As String, ByVal Vendor_Item_No As String, ByVal Blocked As Byte, ByVal Global_Dimension_1_Code As String, ByVal _Variant As String) As Integer
            If (No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("No")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(No, String)
            End If
            If (Description_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Description_1")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Description_1, String)
            End If
            If (Search_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Search_Description")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Search_Description, String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(Unit_Price, Decimal)
            If (Description_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Description_2")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Description_2, String)
            End If
            If (Base_Unit_of_Measure Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Base_Unit_of_Measure")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(Base_Unit_of_Measure, String)
            End If
            If (Item_Category_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Item_Category_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(Item_Category_Code, String)
            End If
            If (Manufacturer_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Manufacturer_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Manufacturer_Code, String)
            End If
            If (Product_Group_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Group_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(Product_Group_Code, String)
            End If
            If (Vendor_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Vendor_No")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(Vendor_No, String)
            End If
            If (Vendor_Item_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Vendor_Item_No")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Vendor_Item_No, String)
            End If
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(Blocked, Byte)
            If (Global_Dimension_1_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Global_Dimension_1_Code")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Global_Dimension_1_Code, String)
            End If
            If (_Variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_Variant")
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(_Variant, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update( _
                    ByVal No As String, _
                    ByVal Description_1 As String, _
                    ByVal Search_Description As String, _
                    ByVal Unit_Price As Decimal, _
                    ByVal Description_2 As String, _
                    ByVal Base_Unit_of_Measure As String, _
                    ByVal Item_Category_Code As String, _
                    ByVal Manufacturer_Code As String, _
                    ByVal Product_Group_Code As String, _
                    ByVal Vendor_No As String, _
                    ByVal Vendor_Item_No As String, _
                    ByVal Blocked As Byte, _
                    ByVal Global_Dimension_1_Code As String, _
                    ByVal _Variant As String, _
                    ByVal Original_timestamp() As Byte, _
                    ByVal Original_No As String) As Integer
            If (No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("No")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(No, String)
            End If
            If (Description_1 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Description_1")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Description_1, String)
            End If
            If (Search_Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Search_Description")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Search_Description, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Unit_Price, Decimal)
            If (Description_2 Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Description_2")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Description_2, String)
            End If
            If (Base_Unit_of_Measure Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Base_Unit_of_Measure")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Base_Unit_of_Measure, String)
            End If
            If (Item_Category_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Item_Category_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Item_Category_Code, String)
            End If
            If (Manufacturer_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Manufacturer_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Manufacturer_Code, String)
            End If
            If (Product_Group_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Product_Group_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Product_Group_Code, String)
            End If
            If (Vendor_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Vendor_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Vendor_No, String)
            End If
            If (Vendor_Item_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Vendor_Item_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Vendor_Item_No, String)
            End If
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Blocked, Byte)
            If (Global_Dimension_1_Code Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Global_Dimension_1_Code")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Global_Dimension_1_Code, String)
            End If
            If (_Variant Is Nothing) Then
                Throw New Global.System.ArgumentNullException("_Variant")
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(_Variant, String)
            End If
            If (Original_timestamp Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_timestamp")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_timestamp, Byte())
            End If
            If (Original_No Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_No")
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_No, String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open) _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open()
            End If
            Try
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close()
                End If
            End Try
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, True)> _
        Public Overridable Overloads Function Update(ByVal Description_1 As String, ByVal Search_Description As String, ByVal Unit_Price As Decimal, ByVal Description_2 As String, ByVal Base_Unit_of_Measure As String, ByVal Item_Category_Code As String, ByVal Manufacturer_Code As String, ByVal Product_Group_Code As String, ByVal Vendor_No As String, ByVal Vendor_Item_No As String, ByVal Blocked As Byte, ByVal Global_Dimension_1_Code As String, ByVal _Variant As String, ByVal Original_timestamp() As Byte, ByVal Original_No As String) As Integer
            Return Me.Update(Original_No, Description_1, Search_Description, Unit_Price, Description_2, Base_Unit_of_Measure, Item_Category_Code, Manufacturer_Code, Product_Group_Code, Vendor_No, Vendor_Item_No, Blocked, Global_Dimension_1_Code, _Variant, Original_timestamp, Original_No)
        End Function
    End Class

    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"), _
     Global.System.ComponentModel.ToolboxItem(True), _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" & _
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"), _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")> _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component

        Private _updateOrder As UpdateOrderOption

        Private _aBDI_JAYA_History_SalesTableAdapter As ABDI_JAYA_History_SalesTableAdapter

        Private _aBDI_JAYA_Cause_of_InactivityTableAdapter As ABDI_JAYA_Cause_of_InactivityTableAdapter

        Private _backupDataSetBeforeUpdate As Boolean

        Private _connection As Global.System.Data.IDbConnection

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set(value As UpdateOrderOption)
                Me._updateOrder = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
            "a", "System.Drawing.Design.UITypeEditor")> _
        Public Property ABDI_JAYA_History_SalesTableAdapter() As ABDI_JAYA_History_SalesTableAdapter
            Get
                Return Me._aBDI_JAYA_History_SalesTableAdapter
            End Get
            Set(value As ABDI_JAYA_History_SalesTableAdapter)
                Me._aBDI_JAYA_History_SalesTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" & _
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" & _
            "a", "System.Drawing.Design.UITypeEditor")> _
        Public Property ABDI_JAYA_Cause_of_InactivityTableAdapter() As ABDI_JAYA_Cause_of_InactivityTableAdapter
            Get
                Return Me._aBDI_JAYA_Cause_of_InactivityTableAdapter
            End Get
            Set(value As ABDI_JAYA_Cause_of_InactivityTableAdapter)
                Me._aBDI_JAYA_Cause_of_InactivityTableAdapter = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set(value As Boolean)
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._aBDI_JAYA_History_SalesTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._aBDI_JAYA_History_SalesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aBDI_JAYA_History_SalesTableAdapter.Connection
                End If
                If ((Not (Me._aBDI_JAYA_Cause_of_InactivityTableAdapter) Is Nothing) _
                            AndAlso (Not (Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Connection) Is Nothing)) Then
                    Return Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set(value As Global.System.Data.IDbConnection)
                Me._connection = value
            End Set
        End Property

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._aBDI_JAYA_History_SalesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._aBDI_JAYA_Cause_of_InactivityTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property

        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateUpdatedRows(ByVal dataSet As Abdi_JayaDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aBDI_JAYA_History_SalesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet._ABDI_JAYA_History_Sales.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aBDI_JAYA_History_SalesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._aBDI_JAYA_Cause_of_InactivityTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet._ABDI_JAYA_Cause_of_Inactivity.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing) _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateInsertedRows(ByVal dataSet As Abdi_JayaDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aBDI_JAYA_History_SalesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet._ABDI_JAYA_History_Sales.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aBDI_JAYA_History_SalesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._aBDI_JAYA_Cause_of_InactivityTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet._ABDI_JAYA_Cause_of_Inactivity.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing) _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function UpdateDeletedRows(ByVal dataSet As Abdi_JayaDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._aBDI_JAYA_Cause_of_InactivityTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet._ABDI_JAYA_Cause_of_Inactivity.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._aBDI_JAYA_History_SalesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet._ABDI_JAYA_History_Sales.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing) _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._aBDI_JAYA_History_SalesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function

        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing) _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing) _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = False) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function

        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Overridable Function UpdateAll(ByVal dataSet As Abdi_JayaDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = False) Then
                Return 0
            End If
            If ((Not (Me._aBDI_JAYA_History_SalesTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aBDI_JAYA_History_SalesTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                        "tring.")
            End If
            If ((Not (Me._aBDI_JAYA_Cause_of_InactivityTableAdapter) Is Nothing) _
                        AndAlso (Me.MatchTableAdapterConnection(Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Connection) = False)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" & _
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" & _
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = False
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken) _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close()
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open()
                workConnOpened = True
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" & _
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try
                '---- Prepare for update -----------
                '
                If (Not (Me._aBDI_JAYA_History_SalesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aBDI_JAYA_History_SalesTableAdapter, Me._aBDI_JAYA_History_SalesTableAdapter.Connection)
                    Me._aBDI_JAYA_History_SalesTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._aBDI_JAYA_History_SalesTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aBDI_JAYA_History_SalesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aBDI_JAYA_History_SalesTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aBDI_JAYA_History_SalesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._aBDI_JAYA_Cause_of_InactivityTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._aBDI_JAYA_Cause_of_InactivityTableAdapter, Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Connection)
                    Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Connection = CType(workConnection, Global.System.Data.SqlClient.SqlConnection)
                    Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Transaction = CType(workTransaction, Global.System.Data.SqlClient.SqlTransaction)
                    If Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Adapter.AcceptChangesDuringUpdate = False
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit()
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges()
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback()
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear()
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges()
                            row.SetAdded()
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close()
                End If
                If (Not (Me._aBDI_JAYA_History_SalesTableAdapter) Is Nothing) Then
                    Me._aBDI_JAYA_History_SalesTableAdapter.Connection = CType(revertConnections(Me._aBDI_JAYA_History_SalesTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._aBDI_JAYA_History_SalesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._aBDI_JAYA_Cause_of_InactivityTableAdapter) Is Nothing) Then
                    Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Connection = CType(revertConnections(Me._aBDI_JAYA_Cause_of_InactivityTableAdapter), Global.System.Data.SqlClient.SqlConnection)
                    Me._aBDI_JAYA_Cause_of_InactivityTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = True
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return True
            End If
            If ((Me.Connection Is Nothing) _
                        OrElse (inputConnection Is Nothing)) Then
                Return True
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return True
            End If
            Return False
        End Function

        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Public Enum UpdateOrderOption

            InsertUpdateDelete = 0

            UpdateInsertDelete = 1
        End Enum

        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)

            Private _relation As Global.System.Data.DataRelation

            Private _childFirst As Integer

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New()
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing) _
                            AndAlso (traversedRows.ContainsKey(parent) = False))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear()
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing) _
                                AndAlso (traversedRows.ContainsKey(parent) = False))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function

            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing) _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
